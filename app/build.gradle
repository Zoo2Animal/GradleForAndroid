//apply plugin: 'com.android.application'
//上面这句的等价代码:这是groovy的写法，参数是一个map，函数调用不需要括号
project.apply([plugin: 'com.android.application'])

android {
//    compileSdkVersion 29
//    buildToolsVersion "29.0.2"

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.lloydfinch.gradleforandroid"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        debug {
            buildConfigField "boolean", "LOGABLE", "true"
            buildConfigField "String", "URL", '"test"'
            resValue "string", "app_name2", "app_debug"
        }

        release {
            buildConfigField "boolean", "LOGABLE", "false"
            buildConfigField "String", "URL", '"online"'
            resValue "string", "app_name2", "app_release"

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        /**
         * 使用debug构建来初始化staging构建
         */
        staging.initWith(buildTypes.debug)

        /**
         * 添加一个构建
         */
        staging {
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
            buildConfigField "String", "URL", '"staging"'
            //覆盖debug构建中的属性值
            debuggable = false
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    viewBinding {
        enabled true
    }


    /**
     * 多渠道
     */
    productFlavors {
        //flavor纬度，flavor里面必须有这个数组中的一个
        flavorDimensions("versionCode")
        red {
            applicationId 'com.gradleforandroid.red'
            versionCode 3
        }

        blue {
            applicationId 'com.gradleforandroid.blue'
            minSdkVersion 19
            versionCode 4
        }

        free {
            versionCode 5
        }

        paid {
            versionCode 6
        }
    }

}

/**
 * 定义variant过滤器
 */
android.variantFilter { variant ->
    if (variant.buildType.name == 'release') {
        variant.getFlavors().each() { flavor ->
            if (flavor.name == 'blue') {
                variant.setIgnore(true)
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //依赖 'group:name:version'
    //等价于 implementation group: 'androidx.appcompat', name: 'appcompat', version: '1.1.0'
    //version可以确保依赖库不会自动更新
//    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation group: 'androidx.appcompat', name: 'appcompat', version: '1.1.0'

    //仅限debug构建的依赖(不是debug的构建就不依赖)
    debugImplementation 'androidx.test.ext:junit:1.1.1'
    //仅限staging构建的依赖
    stagingImplementation 'androidx.test.ext:junit:1.1.1'

    implementation project(':library')
    api project(path: ':libraries:lib2')
    api project(path: ':libraries:lib1')

    implementation project(':javalib')

    //测试依赖，只有test的red渠道才会添加
    testRedImplementation 'junit:junit:4.13'

}


task printName {
    println("this is app")
}

/**
 * task里面function的执行顺序
 * doFirst()会头插
 * doLast()会尾插
 */
task mindTheOrder {
    println("mindTheOrder")

    doFirst {
        println("doFirst1")
    }

    doFirst {
        println("doFirst2")
    }

    doLast {
        println("doLast1")
    }

    doLast {
        println("doLast2")
    }
}
//指定mindTheOrder在printName后面执行，不产生任何依赖，执行mindTheOrder不会触发printName执行
mindTheOrder.mustRunAfter(printName)

//指定mindTheOrder依赖printName，同时也指定了顺序，执行mindTheOrder会触发printName执行
mindTheOrder.dependsOn(printName)

/**
 * 读取配置的密码
 */
task getReleasePassword {
    def password = ''
    if (rootProject.file('private.properties').exists()) {
        Properties properties = new Properties()
        properties.load(rootProject.file('private.properties').newDataInputStream())
        password = properties.getProperty('release.password')
    }
    println("release password is " + password)
//    if (!password?.trim()) {
//        password = new String(System.console().readPassword("\nWhat's the secrect password?"))
//    }

//    if (!password?.trim()) {
//        println("Please input password")
//        password = new String(new Scanner(System.in).nextLine())
//        pritnln("you input $password")
//    }
}

/**
 * 将上述task hook到release构建，确保执行release构建时，上述task会被执行
 */
tasks.whenObjectAdded { theTask ->
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn("getReleasePassword")
    }
}

/**
 * 访问所有的application类型的variants
 * libraryVariants需要放在plugin为com.android.library的gradle文件下执行
 */
android.applicationVariants.all { variant ->
    println("application variant = [$variant]")

    //这里将所有构建的apk文件，名字统一修改为versionName.apk
    variant.outputs.all { output ->
        outputFileName = "${variant.name}-${variant.versionName}.apk"
    }

    //之类为每一个install task创建run task
    if (variant.install) {
        tasks.create(name: "run${variant.name.capitalize()}", dependsOn: variant.install) {
            description "Installs the ${variant.description} and runs the main launcher activity."
//            println("Installs the ${variant.description} and runs the main launcher activity.")
            //添加run task后，执行adb的start指令来运行launcher activity
            doFirst {
                exec {
                    executable = 'adb'
                    args = ['shell', 'am', 'start', '-n', "${android.defaultConfig.applicationId}/.MainActivity"]
                }
            }
        }
    }
}



